AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Amazon Transcribe Live Call Analytics with Agent Assist - Chime Call Analytics w/ Chime Voice Connector

Parameters:
  EnableVoiceToneAnalysis:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: >
      Set to true to enable Chime voice tone analysis. This is only used if Chime
      Call Analytics is enabled.

  EnableSpeakerSearch:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: >
      Set to true to enable Chime speaker search. This is only used if Chime
      Call Analytics is enabled.

  AudioFilePrefix:
    Type: String
    Default: lca-audio-recordings/
    Description: >-
      The Amazon S3 prefix where the merged output audio files will be saved (must end in "/")

  CallAnalyticsPrefix:
    Type: String
    Default: lca-call-analytics/
    Description: The Amazon S3 prefix where the post-call analytics files will be saved, when using analytics api mode (must end in "/")

  KinesisDataStreamName:
    Type: String
    Description: >-
      Name of Kinesis Data Stream to publish events to

  KinesisDataStreamArn:
    Type: String
    Description: >-
      Arn of Kinesis Data Stream to publish events to

  S3BucketName:
    Type: String
    Description: >-
      S3 Bucket name for recordings

  TranscribeApiMode:
    Type: String
    Default: analytics
    AllowedValues:
        - standard
        - analytics
    Description: Set the default operational mode for Transcribe
    
  IsPartialTranscriptEnabled:
    Type: String
    Default: 'true'
    Description: >-
      Enable partial transcripts to receive low latency evolving transcriptions for each conversation turn. Set to false to process only the
      final version of each conversation turn.
    AllowedValues:
      - 'true'
      - 'false'

  IsContentRedactionEnabled:
    Type: String
    Default: "false"
    Description: >-
      Enable content redaction from Amazon Transcribe transcription output. This is only used when
      the 'en-US' language is selected in the TranscribeLanguageCode parameter.
    AllowedValues:
      - "true"
      - "false"

  TranscribeContentRedactionType:
    Type: String
    Default: PII
    Description: >-
      Type of content redaction from Amazon Transcribe transcription output
    AllowedValues:
      - PII

  TranscribeLanguageCode:
    Type: String
    Description: >-
      Language code to be used for Amazon Transcribe
    Default: en-US
    AllowedValues:
      - en-US
      - es-US
      - en-GB
      - fr-CA
      - fr-FR
      - en-AU
      - it-IT
      - de-DE
      - pt-BR
      - ja-JP
      - ko-KR
      - zh-CN

  TranscribePiiEntityTypes:
    Type: String
    # yamllint disable rule:line-length
    Default: BANK_ACCOUNT_NUMBER,BANK_ROUTING,CREDIT_DEBIT_NUMBER,CREDIT_DEBIT_CVV,CREDIT_DEBIT_EXPIRY,PIN,EMAIL,ADDRESS,NAME,PHONE,SSN
    # yamllint enable rule:line-length
    Description: >-
      Select the PII entity types you want to identify or redact. Remove the values that you don't
      want to redact from the default.  DO NOT ADD CUSTOM VALUES HERE.

  CustomVocabularyName:
    Type: String
    Default: ''
    Description: >-
      The name of the vocabulary to use when processing the transcription job. Leave blank if no
      custom vocabulary to be used. If yes, the custom vocabulary must pre-exist in your account.

  CustomLanguageModelName:
    Type: String
    Default: ''
    Description: >-
      The name of the custom language model to use when processing the transcription job. Leave blank if no
      custom language model is to be used. If specified, the custom language model must pre-exist in your account, 
      match the Language Code selected above, and use the 'Narrow Band' base model.

  SiprecLambdaHookFunctionArn:
    Default: ''
    Type: String
    AllowedPattern: '^(|arn:aws:lambda:.*)$'
    Description: >
      (Optional) Used only when CallAudioSource is set to 'Chime Voice Connector (SIPREC)'.
      If present, the specified Lambda function is invoked at the start of each call. 
      The call start event from Chime Voice Connector (containing Siprec headers) is provided as input.
      The function must return a True/False flag to indicate if the call should be processed or ignored, 
      a mapped CallId, an AgentId, and may be extended to support additional features in future.

  VoiceConnectorId:
    Type: String
    Default: ''
    Description: >-
      Voice connector Id for setting up EventBridge Rule to restrict events to specific Chime Voice Connector.

Resources:

  ##########################################################################
  # NodeJS Transcriber Lambda Layer
  ##########################################################################
  TranscriberLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs14.x
        - nodejs16.x
        - nodejs18.x
      Description: >
       This is a layer with shared nodejs libraries for the LCA call transcriber 
       and call analytics initialization Lambdas.
      ContentUri:
        ../lambda_layers/node_transcriber_layer/transcriber-layer.zip
  
  ##########################################################################
  # Custom Resource for Media Pipeline Configuration
  ##########################################################################

  CreateMediaPipelineConfig:
    Type: Custom::MediaPipelineConfigFunc
    Properties:
      ServiceToken: !GetAtt MediaPipelineConfigFunc.Arn
      StackName: !Ref 'AWS::StackName'
      TranscribeApiMode: !Ref TranscribeApiMode
      KinesisStreamName: !Ref KinesisDataStreamName
      OutputBucket: !Ref S3BucketName
      RawFilePrefix: 'lca-audio-raw/'
      RecordingFilePrefix: !Ref AudioFilePrefix
      CallAnalyticsFilePrefix: !Ref CallAnalyticsPrefix
      TcaDataAccessRoleArn: !GetAtt TcaDataAccessRole.Arn
      PostCallContentRedactionOutput: 'redacted'
      SavePartialTranscripts: !Ref IsPartialTranscriptEnabled
      IsContentRedactionEnabled: !If
        - ShouldEnableContentRedaction
        - 'true'
        - 'false'
      TranscribeLanguageCode: !Ref TranscribeLanguageCode
      ContentRedactionType: !Ref TranscribeContentRedactionType
      PiiEntityTypes: !Ref TranscribePiiEntityTypes
      CustomVocabularyName: !Ref CustomVocabularyName
      CustomLanguageModelName: !Ref CustomLanguageModelName

  MediaPipelineConfigFunc:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.8
      InlineCode: |
        import boto3
        import cfnresponse
        import json

        mediaPipelineClient = boto3.client('chime-sdk-media-pipelines')

        def delete_pipeline_configuration(event):
            pipelineConfigName = event['ResourceProperties'].get('StackName', '') + '-MediaPipelineConfig'
            response = mediaPipelineClient.delete-media-insights-pipeline-configuration(Identifier=stackName)

        def create_pipeline_configuration(event):
            pipelineConfigName = event['ResourceProperties'].get('StackName', '') + '-MediaPipelineConfig'
            resourceAccessRoleArn = event['ResourceProperties'].get('ResourceAccessRoleArn', '')
            
            elements = []
            
            # configure kds
            kdsArn = event['ResourceProperties'].get('KinesisStreamArn', '')
            kds = {
                "Type": "KinesisDataStreamSink",
                "KinesisDataStreamSinkConfiguration": {
                    "InsightsTarget": kdsArn
                }
            }
            elements.append(kds)
            
            # configure transcribe
            transcribeApiMode = event['ResourceProperties'].get('TranscribeApiMode', '')
            transcribeLanguageCode = event['ResourceProperties'].get('TranscribeLanguageCode', '')
            callAnalyticsFilePrefix = event['ResourceProperties'].get('CallAnalyticsFilePrefix', '')
            contentRedactionType = event['ResourceProperties'].get('ContentRedactionType', '')
            customLanguageModelName = event['ResourceProperties'].get('CustomLanguageModelName', '')
            customVocabularyName = event['ResourceProperties'].get('CustomVocabularyName', '')
            isContentRedactionEnabled = event['ResourceProperties'].get('IsContentRedactionEnabled', '')
            outputBucket = event['ResourceProperties'].get('OutputBucket', '')
            piiEntityTypes = event['ResourceProperties'].get('PiiEntityTypes', '')
            postCallContentRedactionOutput = event['ResourceProperties'].get('PostCallContentRedactionOutput', '')
            rawFilePrefix = event['ResourceProperties'].get('RawFilePrefix', '')
            recordingFilePrefix = event['ResourceProperties'].get('RecordingFilePrefix', '')
            tcaDataAccessRoleArn = event['ResourceProperties'].get('TcaDataAccessRoleArn', '')
            outputLocation = "s3://%s/%s"%(outputBucket,callAnalyticsFilePrefix)
            
            if transcribeApiMode == 'analytics':
                tca = {
                    "Type":"AmazonTranscribeCallAnalyticsProcessor",
                    "AmazonTranscribeCallAnalyticsProcessorConfiguration": { 
                        "LanguageCode": transcribeLanguageCode,
                        "PostCallAnalyticsSettings": { 
                          "DataAccessRoleArn": tcaDataAccessRoleArn,
                          "OutputLocation": outputLocation
                        }
                    }
                }
                if isContentRedactionEnabled == 'true':
                    tca["AmazonTranscribeCallAnalyticsProcessorConfiguration"]["ContentRedactionType"] = contentRedactionType
                    tca["AmazonTranscribeCallAnalyticsProcessorConfiguration"]["PiiEntityTypes"] = piiEntityTypes
                    if postCallContentRedactionOutput:
                        tca["AmazonTranscribeCallAnalyticsProcessorConfiguration"]["PostCallAnalyticsSettings"]["ContentRedactionOutput"] = postCallContentRedactionOutput
                
                if customLanguageModelName:
                    tca["AmazonTranscribeCallAnalyticsProcessorConfiguration"]["LanguageModelName"] = customLanguageModelName
                if customVocabularyName:
                    tca["AmazonTranscribeCallAnalyticsProcessorConfiguration"]["vocabularyName"] = customVocabularyName
                elements.append(tca)
                
            # configure lambda sink
            lambdaSinkArn = event['ResourceProperties'].get('LambdaSinkArn', '')
            lambdaSink = {
                "Type": "LambdaFunctionSink",
                "LambdaFunctionSinkConfiguration": {
                    "InsightsTarget": lambdaSinkArn
                }
            }
            elements.append(lambdaSink)
            
            # configure voice analytics
            enableVoiceToneAnalysis = event['ResourceProperties'].get('EnableVoiceToneAnalysis', '')
            enableSpeakerSearch = event['ResourceProperties'].get('EnableSpeakerSearch', '')
            voiceAnalytics =  {
                "Type": "VoiceAnalyticsProcessor",
                "VoiceAnalyticsProcessorConfiguration": {
                    "SpeakerSearchStatus": 'Enabled' if enableVoiceToneAnalysis == 'true' else 'Disabled',
                    "VoiceToneAnalysisStatus": 'Enabled' if enableVoiceToneAnalysis == 'true' else 'Disabled'
                }
            }
            elements.append(voiceAnalytics)
            
            print(json.dumps(elements))
            
            response = mediaPipelineClient.create_media_insights_pipeline_configuration(
                MediaInsightsPipelineConfigurationName=pipelineConfigName,
                ResourceAccessRoleArn=resourceAccessRoleArn,
                RealTimeAlertConfiguration={
                    'Disabled': True
                },
                Elements=elements
            )
            
            return {'Message': 'Created LCA Media Pipeline Config.'}
            

        def lambda_handler(event, context):
            print(json.dumps(event))

            if event['RequestType'] == "Create":
                try:
                    responseData = create_pipeline_configuration(event)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)                
                except Exception as e:
                    error = f'Exception thrown: {e}. Please see https://github.com/aws-samples/amazon-transcribe-live-call-analytics/blob/main/TROUBLESHOOTING.md for more information.'
                    print(error)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {}, reason=error )   
            elif event['RequestType'] == 'Delete':
                try:
                    delete_vc(event)
                    responseData = {'Message': 'Deleting LCA Media Pipeline Config.  Returning success status.'}                   
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)                      
                except Exception as e:
                    error = f'Exception thrown: {e}. Please see https://github.com/aws-samples/amazon-transcribe-live-call-analytics/blob/main/TROUBLESHOOTING.md for more information.'
                    print(error)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {}, reason=error )   
            else:
                responseData = {'Message': 'Update is no-op. Returning success status.'}
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)


  ### TODO: Add Lambda for voice analysis

  ##########################################################################
  # Boto3 Transcriber Lambda Layer
  ##########################################################################
  Boto3LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
        - python3.8
      Description: >
       This is a layer with shared python libraries for the custom resource 
       to create the ChimeSDKMediaInsightsPipelineConfiguration.
      ContentUri:
        ../lambda_layers/boto3_layer/boto3_lambda_layer.zip

  ##########################################################################
  # Call Transcriber
  ##########################################################################

  TranscriberCallEventTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AttributeDefinitions:
        # primary key attributes
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      TimeToLiveSpecification:
        AttributeName: ExpiresAfter
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  
  CallTranscriberFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      Description: >-
        AWS Lambda Function that will be triggered when a new call starts. This will
        read from the KVS streams, stitch the channels together, send audio to
        transcribe, and store the transcriptions in DynamoDB
      Handler: index.handler
      Layers:
        # periodically update the Lambda Insights Layer
        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-extension-versions.html
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension-Arm64:2"
        - !Ref TranscriberLambdaLayer
      Role: !GetAtt CallTranscriberFunctionRole.Arn
      Runtime: nodejs18.x
      MemorySize: 768
      Timeout: 900
      Tracing: Active
      Environment:
        Variables:
          TRANSCRIBE_API_MODE: !Ref TranscribeApiMode
          BUFFER_SIZE: "128"
          LAMBDA_INVOKE_TIMEOUT: "720000"
          KINESIS_STREAM_NAME: !Ref KinesisDataStreamName
          TRANSCRIBER_CALL_EVENT_TABLE_NAME: !Ref TranscriberCallEventTable
          REGION: !Ref AWS::Region
          OUTPUT_BUCKET: !Ref S3BucketName
          RAW_FILE_PREFIX: 'lca-audio-raw/'
          RECORDING_FILE_PREFIX: !Ref AudioFilePrefix
          CALL_ANALYTICS_FILE_PREFIX: !Ref CallAnalyticsPrefix
          TCA_DATA_ACCESS_ROLE_ARN: !GetAtt TcaDataAccessRole.Arn
          POST_CALL_CONTENT_REDACTION_OUTPUT: 'redacted'
          TEMP_FILE_PATH: '/tmp/'
          SAVE_PARTIAL_TRANSCRIPTS: !Ref IsPartialTranscriptEnabled
          IS_CONTENT_REDACTION_ENABLED: !If
            - ShouldEnableContentRedaction
            - 'true'
            - 'false'
          TRANSCRIBE_LANGUAGE_CODE: !Ref TranscribeLanguageCode
          CONTENT_REDACTION_TYPE: !Ref TranscribeContentRedactionType
          PII_ENTITY_TYPES: !Ref TranscribePiiEntityTypes
          CUSTOM_VOCABULARY_NAME: !Ref CustomVocabularyName
          CUSTOM_LANGUAGE_MODEL_NAME: !Ref CustomLanguageModelName
          LAMBDA_HOOK_FUNCTION_ARN: !Ref SiprecLambdaHookFunctionArn
      CodeUri: ../lambda_functions/chime_call_analytics_initialization
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired

  CallTranscriberFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        # CloudWatch Insights Managed Policy
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt TcaDataAccessRole.Arn
              - Effect: Allow
                Action:
                  - transcribe:DeleteTranscriptionJob
                  - transcribe:GetTranscriptionJob
                  - transcribe:GetVocabulary
                  - transcribe:ListTranscriptionJobs
                  - transcribe:ListVocabularies
                  - transcribe:StartStreamTranscription
                  - transcribe:StartCallAnalyticsStreamTranscription
                  - transcribe:StartTranscriptionJob
                Resource: "*"
              - Action:
                  - "kinesisvideo:Describe*"
                  - "kinesisvideo:Get*"
                  - "kinesisvideo:List*"
                Effect: "Allow"
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:\
                    ${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt TranscriberCallEventTable.Arn
              - Action:
                  - kinesis:PutRecord
                Effect: Allow
                Resource:  
                  - !Ref KinesisDataStreamArn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${bucket}"
                    - bucket: !Ref S3BucketName
                  - !Sub
                    - "arn:aws:s3:::${bucket}/*"
                    - bucket: !Ref S3BucketName
              - !If
                - ShouldEnableLambdaHook
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: !Sub "${SiprecLambdaHookFunctionArn}"
                - Ref: AWS::NoValue

  TcaDataAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - transcribe.streaming.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: tca-post-call-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${bucket}"
                    - bucket: !Ref S3BucketName
                  - !Sub
                    - "arn:aws:s3:::${bucket}/*"
                    - bucket: !Ref S3BucketName          

    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: >-
              Transcribe does not support resource-level permissions and KVS streams are dynamic

  AllowEventBridgeToCallTranscriberFunctionLambdaFromChimeVC:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref CallTranscriberFunction
      Action: "lambda:InvokeFunction"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleToTriggerCallTranscriberLambdaFromChimeVC.Arn
      SourceAccount: !Ref AWS::AccountId

  EventBridgeRuleToTriggerCallTranscriberLambdaFromChimeVC:
    Type: AWS::Events::Rule
    Properties:
      Description: "This rule is triggered when the ChimeVC streaming status changes"
      EventPattern:
        detail:
          voiceConnectorId:
            - !Ref VoiceConnectorId
        detail-type:
          - "Chime VoiceConnector Streaming Status"
        source:
          - aws.chime
      Targets:
        - Id: CallTranscriberTarget
          Arn: !GetAtt CallTranscriberFunction.Arn
      State: "ENABLED"

  AllowEventBridgeToCallTranscriberFunctionLambdFromIVR:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref CallTranscriberFunction
      Action: "lambda:InvokeFunction"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleToTriggerCallTranscriberLambdaFromIVR.Arn
      SourceAccount: !Ref AWS::AccountId

  EventBridgeRuleToTriggerCallTranscriberLambdaFromIVR:
    Type: AWS::Events::Rule
    Properties:
      Description: "This rule is triggered  when a START_CALL_PROCESSING event is sent from IVR"
      EventPattern:
        detail-type:
          - "START_CALL_PROCESSING"
        source:
          - lca-solution
      Targets:
        - Id: CallTranscriberTarget
          Arn: !GetAtt CallTranscriberFunction.Arn
      State: "ENABLED"

  # Permission for Call Transcriber to invoke itself
  CallTranscriberPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CallTranscriberFunction
      Principal: !GetAtt CallTranscriberFunctionRole.Arn

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: Amazon S3 Configuration
        Parameters:
          - S3BucketName
          - AudioFilePrefix
          - MonoAudioFilePrefix
    ParameterLabels:
      S3BucketName:
        default: Call Audio Bucket Name
      AudioFilePrefix:
        default: Audio File Prefix
      IsContentRedactionEnabled:
        default: Enable Content Redaction
      TranscribeContentRedactionType:
        default: Type of Content Redaction
      TranscribeLanguageCode:
        default: Transcription Language Code
      TranscribePiiEntityTypes:
        default: Transcription PII Redaction Entity Types
      CustomVocabularyName:
        default: Transcription Custom Vocabulary Name
      
Conditions:
  ShouldEnableContentRedaction: !And
  - !Equals [!Ref IsContentRedactionEnabled, 'true']
  - !Equals [!Ref TranscribeLanguageCode, 'en-US']
  ShouldEnableLambdaHook: !Not [!Equals [!Ref SiprecLambdaHookFunctionArn, '']]

Outputs:

  CallTranscriberEventTableName:
    Value: !Ref TranscriberCallEventTable

  CallTranscriberEventTableArn:
    Value: !GetAtt TranscriberCallEventTable.Arn

  IsContentRedactionEnabled: 
    Value: !If
      - ShouldEnableContentRedaction
      - 'true'
      - 'false'